# -*- coding: utf-8 -*-
"""prets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15f7CcB92yySP0yzstXP9SU6cFcbOyfgm
"""

import tensorflow as tf
from tensorflow.keras.layers import Input, Reshape, Dropout, Dense 
from tensorflow.keras.layers import Flatten, BatchNormalization
from tensorflow.keras.layers import Activation, ZeroPadding2D
from tensorflow.keras.layers import LeakyReLU,Concatenate,concatenate
from tensorflow.keras.layers import UpSampling2D, Conv2D,Conv2DTranspose,MaxPooling2D
from tensorflow.keras.models import Sequential, Model, load_model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import LeakyReLU,Add
import tensorflow
import cv2
import numpy as np
from PIL import Image
from tqdm import tqdm
import os 
import time
import matplotlib.pyplot as plt
from tensorflow.keras.utils import plot_model

# Commented out IPython magic to ensure Python compatibility.

try:
    from google.colab import drive
    drive.mount('/content/drive', force_remount=True)
    COLAB = True
    print("Note: using Google CoLab")
#     %tensorflow_version 2.x
except:
    print("Note: not using Google CoLab")
    COLAB = False

anns = open("/content/drive/MyDrive/TSRD-Train Annotation (1)/TsignRecgTrain4170Annotation.txt")
im,lab = [],[]
count = 0
g = len(os.listdir('/content/drive/MyDrive/tsrd-train (1)'))
for i in anns.readlines():
  
  count += 1
  print(count/g * 100 , end = ' ')
  f = i.split(';')
  img = cv2.imread(os.path.join('/content/drive/MyDrive/tsrd-train (1)',f[0]))
  
  dro = img.shape[0]/100.0 
  dri = img.shape[1]/100.0
  img = cv2.resize(img,(100,100))
  
  im.append(img)
  for i in range(1,len(f)-2,2):
    f[i] = int(f[i])/dri
    f[i+1] = int(f[i+1])/dro
  f[-2] = int(f[-2])
  lab.append([int(fg) for fg in f[3:8]])
  print(' ',end ='\r')
  
im = np.array(im)
im.reshape(-1,100,100,3)
lab = np.array(lab).reshape(-1,5)

model = Sequential()
model.add(Input((100,100,3)))
model.add(Conv2D(4,(4,4),strides=(1,1),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(8,(4,4),strides=(1,1),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(16,(4,4),strides=(1,1),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(32,(4,4),strides=(1,1),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(64,(4,4),strides=(1,1),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(Flatten())
model.add(Dense(1024,activation='relu'))
model.add(Dense(256,activation='relu'))
model.add(Dense(128,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(5,activation='relu'))
model.compile('adam',loss='log_cosh',metrics=['acc'])
mod_plot = plot_model(model,'model.png',show_dtype=True,dpi = 220,show_shapes=True)
mod_sum = model.summary()

model.fit(im,lab,epochs = 100,validation_split=0.01,shuffle=True)

histo = model.history
plt.plot(histo.history['acc'])
plt.plot(histo.history['val_acc'])
plt.show()
plt.plot(histo.history['loss'])
plt.plot(histo.history['val_loss'])
plt.show()

model.save('/content/drive/MyDrive/sdcar/coords.h5')

model = Sequential()
model.add(Input((100,100,3)))
model.add(Conv2D(4,(4,4),strides=(1,1),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(8,(4,4),strides=(1,1),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(16,(4,4),strides=(1,1),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(32,(4,4),strides=(1,1),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(64,(4,4),strides=(1,1),activation='relu'))
model.add(MaxPooling2D((2,2)))
model.add(Flatten())
model.add(Dense(1024,activation='relu'))
model.add(Dense(256,activation='relu'))
model.add(Dense(128,activation='relu'))
model.add(Dense(58,activation='sigmoid'))
model.compile('adam',loss='binary_crossentropy',metrics=['acc'])

laby = []
for i in range(len(lab)):
  d = np.zeros(58)
  d[lab[i][-1]] = 1
  laby.append(d)
laby = np.array(laby).reshape(-1,58)

model.fit(im,laby,epochs = 20,validation_split=0.01,shuffle=True)

model.save('/content/drive/MyDrive/sdcar/mod_class.h5')

import tensorflow as tf
from tensorflow.keras.layers import Input, Reshape, Dropout, Dense 
from tensorflow.keras.layers import Flatten, BatchNormalization
from tensorflow.keras.layers import Activation, ZeroPadding2D
from tensorflow.keras.layers import LeakyReLU,Concatenate,concatenate
from tensorflow.keras.layers import UpSampling2D, Conv2D,Conv2DTranspose,MaxPooling2D
from tensorflow.keras.models import Sequential, Model, load_model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import LeakyReLU,Add
import tensorflow
import cv2
import numpy as np
from PIL import Image
from tqdm import tqdm
import os 
import time
import matplotlib.pyplot as plt
from tensorflow.keras.utils import plot_model

input = Input((256,256,3))
seg1 = Conv2D(16,(4,4),strides=(1,1),padding='same',activation='relu')(input)
m1 = MaxPooling2D((2,2))(seg1)
seg2 = Conv2D(16,(4,4),strides=(1,1),padding='same',activation='relu')(m1)
m2 = MaxPooling2D((2,2))(seg2)
seg3 = Conv2D(32,(4,4),strides=(1,1),padding='same',activation='relu')(m2)
m3 = MaxPooling2D((2,2))(seg3)
seg4 = Conv2D(32,(4,4),strides=(1,1),padding='same',activation='relu')(m3)
m4 = MaxPooling2D((2,2))(seg4)
seg5 = Conv2D(64,(4,4),strides=(1,1),padding='same',activation='relu')(m4)
m5 = MaxPooling2D((2,2))(seg5)
seg6 = Conv2D(64,(4,4),strides=(1,1),padding='same',activation='relu')(m5)
m6 = MaxPooling2D((2,2))(seg6)
seg7 = Conv2D(128,(4,4),strides=(1,1),padding='same',activation='relu')(m6)
m7 = MaxPooling2D((2,2))(seg7)
seg8 = Conv2D(128,(4,4),strides=(1,1),padding='same',activation='relu')(m7)

deg1 = Conv2DTranspose(128,(4,4),strides=(2,2),padding='same',activation='relu')(seg8)
deg1 = concatenate([deg1,seg7],axis=3)
deg1 = Conv2DTranspose(64,(4,4),strides=(2,2),padding='same',activation='relu')(deg1)
deg1 = concatenate([deg1,seg6],axis=3)
deg1 = Conv2DTranspose(64,(4,4),strides=(2,2),padding='same',activation='relu')(deg1)
deg1 = concatenate([deg1,seg5],axis=3)
deg1 = Conv2DTranspose(32,(4,4),strides=(2,2),padding='same',activation='relu')(deg1)
deg1 = concatenate([deg1,seg4],axis=3)
deg1 = Conv2DTranspose(32,(4,4),strides=(2,2),padding='same',activation='relu')(deg1)
deg1 = concatenate([deg1,seg3],axis=3)
deg1 = Conv2DTranspose(16,(4,4),strides=(2,2),padding='same',activation='relu')(deg1)
deg1 = concatenate([deg1,seg2],axis=3)
deg1 = Conv2DTranspose(16,(4,4),strides=(2,2),padding='same',activation='relu')(deg1)
deg1 = concatenate([deg1,seg1],axis=3)
deg1 = Conv2DTranspose(3,(4,4),strides=(1,1),padding='same',activation='relu')(deg1)
model = Model(input,deg1)

model.compile(Adam(0.0003),loss='binary_crossentropy',metrics=['acc'])

plot_model(model,'model.png',show_dtype=True,dpi = 220,show_shapes=True)

impath = "/content/drive/MyDrive/sdcar/image"
segpath = "/content/drive/MyDrive/sdcar/segs"
im = []
seg = []
g = len(os.listdir(impath))
count = 0
for i in os.listdir(impath):
  count += 1
  print(count/g * 100 , end = ' ')
  img = cv2.imread(os.path.join(impath,i))
  img = cv2.resize(img,(256,256))
  img = img/255
  im.append(img)
  segu = os.path.join(segpath,i[0:-4]+'.png')
  img = cv2.imread(segu)
  img = cv2.resize(img,(256,256))
  img = img/255
  seg.append(img)
  print(' ',end ='\r')
  if(count>500):
    break

model.load_weights("/content/drive/MyDrive/sdcar/segnet.h5")

im = np.array(im)
seg = np.array(seg)

np.save("/content/drive/MyDrive/im.npy",im)
np.save("/content/drive/MyDrive/seg.npy",seg)

im = np.load("/content/drive/MyDrive/im.npy")
seg = np.load("/content/drive/MyDrive/seg.npy")

# Commented out IPython magic to ensure Python compatibility.
# Load the TensorBoard notebook extension
# %reload_ext tensorboard
import datetime

logdir = os.path.join("/content/drive/MyDrive/sdcar/logs", datetime.datetime.now().strftime("%Y%m%d-%H%M%S"))
tensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, histogram_freq=1)

!kill 325

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir "/content/drive/MyDrive/sdcar/logs"

model.fit(im,seg,epochs=400,validation_split=0.01,callbacks=[tensorboard_callback])

plt.imshow(model.predict(im[100].reshape(-1,256,256,3)).reshape(256,256,3))

plt.imshow(model.predict(imf.reshape(-1,256,256,3)).reshape(256,256,3))

imf = cv2.resize(cv2.imread("/content/949586-516e.jpg"),(256,256))/255

plt.imshow(im[100])

plt.imshow(im[100])
plt.show()
plt.imshow(seg[100])
plt.show()

model.save("/content/drive/MyDrive/sdcar/segnet_binco_0003.h5")



